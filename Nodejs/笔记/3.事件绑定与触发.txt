大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。
为什么要这样做呢？原因有两点：
首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。
其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系
EventEmitter使用：
// 引入 events 模块
var events = require('events');
// 创建 eventEmitter 对象
var eventEmitter = new events.EventEmitter();
event.on('some_event', function() { 		//绑定事件 function可以显示定义如 var func = function func(){}
	console.log('some_event 事件触发'); 
}); 
event.emit('some_event'); 			//触发事件



出错处理：
var events = require('events'); 
var emitter = new events.EventEmitter(); 
emitter.emit('error'，new Error('error message'));//当错误出现时，定义错误信息（貌似全局）